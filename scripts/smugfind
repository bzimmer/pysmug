#! /usr/bin/python

# Copyright (c) 2008 Brian Zimmer <bzimmer@ziclix.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from optparse import OptionParser
from pysmug.smugfind import SmugFind, Predicate

p = OptionParser()
p.add_option("-s", "--sharegroups", dest="sharegroups", default=False, action="store_true", help="display sharegroup")
p.add_option("-f", "--fields", dest="fields", default=[], action="append", help="list of fields to display for each entity")
p.add_option("-l", "--list", dest="list", default=False, action="store_true", help="available list of fields to display")
p.add_option("-p", "--predicate", dest="predicate", default=None, action="store", help="predicate to evaluate")
opts, args = p.parse_args()

sd = SmugFind()

if opts.fields:
  for f in opts.fields:
    if f not in sd.fields:
      raise KeyError("field {%s} doesn't exist" % (f))

if opts.list:
  for item in sd.fields.items():
    print item
elif opts.sharegroups:
  for sg, albums in sd.sharegroups(opts.fields):
    for a in albums:
      print (sg, a)
else:
  p = opts.predicate and Predicate(opts.predicate) or None
  for a in sd.find(fields=opts.fields, predicate=p):
    print a

